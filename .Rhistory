plot(LWard_knn, st_geometry(coordsW), col="blue")
# create a spatial weights matrix object from these weights
# B is binary encoding listing them as neighbours or not, W is row standardised
Lward.queens_weight <- LWard_nb %>%
nb2listw(., style="W")
Lward.knn_4_weight <- LWard_knn %>%
nb2listw(., style="W")
Queen <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(model2resids) %>%
pull() %>%
moran.test(., Lward.queens_weight) %>%
tidy()
Nearest_neighbour <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(model2resids) %>%
pull() %>%
moran.test(., Lward.knn_4_weight) %>%
tidy()
# inspect
Queen
Nearest_neighbour
# original model
model2 <- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles)
tidy(model2)
library(spatialreg)
slag_dw_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="c"), method = "eigen")
library(spatialreg)
slag_dw_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="C"), method = "eigen")
library(spatialreg)
slag_dw_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="C"), method = "eigen")
# what do the outputs show?
tidy(sslag_dv_model2_queen)
# what do the outputs show?
tidy(slag_dv_model2_queen)
# what do the outputs show?
tidy(slag_dw_model2_queen)
# what do the outputs show?
rm(slag_dw_model2_queen)
# what do the outputs show?
tidy(slag_dv_model2_queen)
slag_dv_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="C"), method = "eigen")
slag_dv_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="C"), method = "eigen")
# what do the outputs show?
tidy(slag_dv_model2_queen)
# glance() gives model stats but this need something produced from a linear model
glance(slag_dv_model2_queen)
t <- summary(slag_dv_model2_queen)
sum(t$residuals)
library(lmtest)
install.packages("lmtest")
library(lmtest)
lrtesst(slag_dv_model2_queen, model2)
library(lmtest)
lrtesst(slag_dv_model2_queen, model2)
lrtest(slag_dv_model2_queen, model2)
# weight list is just the code from the lagsarlm
weight_list <- nb2listw(LWard_knn, style = "C")
imp <- impacts(slag_dv_model2_queen, listw=weight_list)
imp
slag_dv_model2_queen_row <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthoriesd_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiless, nb2listw(LWard_nb, style = "W"), method = "eigen")
slag_dv_model2_queen_row <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthoriesd_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style = "W"), method = "eigen")
slag_dv_model2_queen_row <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style = "W"), method = "eigen")
W <- as(weight_lists, "CsparseMatrix")
W <- as(weight_list, "CsparseMatrix")
trMatc <- trW(W, type = "mult")
trMC <- trW(W, type = "MC")
imp2 <- impacts(slag_dv_model2_queen_row, tr=trMatc, R=200)
imp3 <- impacts(slag_dv_model2_queen_row, tr=trMC, R=200)
imp2
imp3
sum <- summary(imp2, zstats=TRUE, short=TRUE)
sum
# run a spatially-lagged regression model
slag_dv_model2_knn4 <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style = "C"), method = "eigen")
# what do the outputs show?
tidy(slag_dv_model2_knn4)
# write out the residuals
LonWardProfiles <- LonWardProfiles %>%
mutate(slag_dv_model2_knn_resids = residuals(slag_dv_model2_knn4))
KNN4Moran <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(slag_dv_model2_knn_resids) %>%
pull() %>%
moran.test(., Lward.knn_4_weight) %>%
tidy()
KNN4Moran
sem_model1 <- errorsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style = "C"), method = "eigen")
tidy(sem_model1)
library(spdep)
Lward.queens_weight_ROW <- LWard_nb %>%
nb2listw(., style = "W")
lm.LMtests(model2, Lward.queens_weight_ROW, test c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
lm.LMtests(model2, Lward.queens_weight_ROW, test = c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
extradata <- read_csv("https://www.dropbox.com/s/qay9q1jwpffxcqj/LondonAdditionalDataFixed.csv?raw=1")
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code", "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
names(LonWardProfiles)
p <- ggplot(LonWardProfiles,
aes(x=unauth_absence_schools11,
y= average_gcse_capped_point_scores_2014))
p + geom_point(aes(colour = inner_outer))
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code", "Wardcode")) %>%
clean_names()
View(extradata)
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code", "WardCode")) %>%
clean_names()
View(extradata)
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code", "Wardcode")) %>%
clean_names()
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
p <- ggplot(LonWardProfiles,
aes(x=unauth_absence_schools11,
y= average_gcse_capped_point_scores_2014))
p + geom_point(aes(colour = inner_outer))
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
View(extradata)
names(LonWardProfiles)
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
LonWardProfiles$innter_outer
extradata$innter_outer
extradata$inner_outer
View(extradata)
extradata$Wardcode
names(extradata)
p + geom_point(aes(colour = InnerOuter))
p + geom_point(aes(colour = InnerOuter))
p <- ggplot(LonWardProfiles,
aes(x=unauth_absence_schools11,
y= average_gcse_capped_point_scores_2014))
p + geom_point(aes(colour = InnerOuter))
# add the extra data too
LonWardProfiless <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
rm(LonWardProfiless)
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
# add the extra data too
LonWardProfiles <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# add the extra data too
LonWardProfiles <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
p <- ggplot(LonWardProfiles,
aes(x=unauth_absence_schools11,
y= average_gcse_capped_point_scores_2014))
p + geom_point(aes(colour = InnerOuter))
```{r}
extradata <- read_csv("https://www.dropbox.com/s/qay9q1jwpffxcqj/LondonAdditionalDataFixed.csv?raw=1")
```{r}
# add the extra data too
LonWardProfiles <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
# add the extra data too
LonWardProfiles <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# library a bunch of packages we may (or may not) use
library(here)
library(usethis)
library(tidyverse)
library(broom)
library(mapview)
library(sf)
library(tmap)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip", destfile="statistical-gis-boundaries-london.zip")
library(fs)
listfiles <- dir_info(here::here()) %>%
dplyr::filter(str_detect(path, ".zip")) %>%
dplyr::select(path) %>%
pull() %>%
# print out the .gz file
print() %>%
as.character() %>%
utils::unzip(exdir=here::here())
# look what is inside the zip
Londonwards <- fs::dir_info(here::here("statistical-gis-boundaries-london", "ESRI")) %>%
# $ means exact match
dplyr::filter(str_detect(path, "London_Ward_CityMerged.shp$")) %>%
dplyr::select(path) %>%
dplyr::pull() %>%
# read the file in
sf::st_read()
# check the data
qtm(Londonwards)
# read in some attribute data
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", col_names = TRUE, locale = locale(encoding = 'Latin1'))
# check all of the columns have been read in correctly
Datatypelist <- LondonWardProfiles %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to = "All_variables",
values_to = "Variable_class")
Datatypelist
# we can use readr to deal with the issues in this dataset - which are to do with text values being stored in columns containing numeric values
# read in some data - couple of things here. Read in specifying a load of likely 'n/a' values, also specify Latin1 as encoding as there is a pound sign (Â£) in one of the column headers
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
na = c("", "NA", "n/a"),
locale = locale(encoding = 'Latin1'),
col_names = TRUE)
# check all of the columns have been read in correctly
Datatypelist <- LondonWardProfiles %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to = "All_variables",
values_to = "Variable_class")
Datatypelist
# merge boundaries and data
LonWardProfiles <- Londonwards %>%
left_join(.,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
# let's map out dependent variable to see if the join has worked:
tmap_mode("plot")
qtm(LonWardProfiles,
fill = "Average GCSE capped point scores - 2014",
borders = NULL,
fill.palette = "Blues")
# might be a good idea to see where the secondary schools are in London too
london_schools <- read_csv("https://data.london.gov.uk/download/london-schools-atlas/57046151-39a0-45d9-8dc0-27ea7fd02de8/all_schools_xy_2016.csv")
# from the coordinate values stored in the x and y columns, which look like they are latitude and longitude values, create a new points dataset
lon_schools_sf <- st_as_sf(london_schools,
coords = c("x", "y"),
crs = 4326)
lon_sec_schools_sf <- lon_schools_sf %>%
filter(PHASE=="Secondary")
tmap_mode("plot")
qtm(lon_sec_schools_sf)
q <- qplot(x = `Unauthorised Absence in All Schools (%) - 2013`,
y = `Average GCSE capped point scores - 2014`,
data=LonWardProfiles)
# plot with a regression line - note that I've added some jitter here as the x-scale is rounded
q + stat_smooth(method = "lm", se = FALSE, size = 1) + geom_jitter()
# run the linear regression model and store its outputs in an object called model1
Regressiondata <- LonWardProfiles %>%
clean_names() %>%
dplyr::select(average_gcse_capped_point_scores_2014,
unauthorised_absence_in_all_schools_percent_2013)
# now model
model1 <- Regressiondata %>%
lm(average_gcse_capped_point_scores_2014 ~
unauthorised_absence_in_all_schools_percent_2013,
data = .)
summary(model1)
library(broom)
tidy(model1)
glance(model1)
library(tidypredict)
Regressiondata %>%
tidypredict_to_column(model1)
library(tidymodels)
# set the model
lm_mod = linear_reg()
# fit the model
lm_fit <-
lm_mod %>%
fit(average_gcse_capped_point_scores_2014 ~
unauthorised_absence_in_all_schools_percent_2013,
data=Regressiondata)
# we cover tidy and glance in a minute
tidy(lm_fit)
glance(lm_fit)
# let's check the distribution of these variables first
# adding ..density.. means that the historgram is a density plot
ggplot(LonWardProfiles, aes(x=`Average GCSE capped point scores - 2014`)) +
geom_histogram(aes(y = ..density..),
binwidth = 5) +
geom_density(colour="red",
size=1,
adjust=1)
library(ggplot2)
# from 21/10 there is an error on the website with
# median_house_price_2014 being called median_house_price<c2>2014
# this was corrected around 23/11 but can be corrected with rename..
LonWardProfiles <- LonWardProfiles %>%
dplyr::rename(median_house_price_2014 = `Median House Price (Â£) - 2014`) %>%
janitor::clean_names()
ggplot(LonWardProfiles, aes(x=median_house_price_2014)) + geom_histogram()
qplot(x = median_house_price_2014,
y = average_gcse_capped_point_scores_2014,
data = LonWardProfiles)
ggplot(LonWardProfiles, aes(x=log(median_house_price_2014))) + geom_histogram()
symbox(~median_house_price_2014, LonWardProfiles, na.rm=T, powers=seq(-3, 3, by=.5))
ggplot(LonWardProfiles, aes(x=(median_house_price_2014)^(-1))) + geom_histogram()
qplot(x = (median_house_price_2014)^(-1),
y = average_gcse_capped_point_scores_2014,
data = LonWardProfiles)
qplot(x = log(median_house_price_2014),
y = average_gcse_capped_point_scores_2014,
data = LonWardProfiles)
# save the residuals into your dataframe
model_data <- model1 %>%
augment(., Regressiondata)
View(model_data)
# plot residuals
model_data %>%
dplyr::select(.resid) %>%
pull() %>%
qplot() +
geom_histogram()
Regressiondata2 <- LonWardProfiles %>%
clean_names() %>%
dplyr::select(average_gcse_capped_point_scores_2014,
unauthorised_absence_in_all_schools_percent_2013,
median_house_price_2014)
model2 <- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014),data = Regressiondata2)
# show the summary of those outputs
tidy(model2)
glance(model2)
# and for future use, write the residuals out
model_data2 <- model2 %>%
augment(., Regressiondata2)
# also add them to the shapelayer
LonWardProfiles <- LonWardProfiles %>%
mutate(model2resids = residuals(model2))
library(corrr)
Correlation <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013, median_house_price_2014) %>%
mutate(median_house_price_2014 = log(median_house_price_2014)) %>%
correlate() %>%
# just focus on GCSE and house prices
focus(-average_gcse_capped_point_scores_2014, mirror = TRUE)
# visualise the correlation matrix
rplot(Correlation)
vif(model2)
position <- c(10:74)
Correlation_all <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(position) %>%
correlate()
rplot(Correlation_all)
# print some model diagnostics
par(mfrow=c(2,2)) # plot to 2 by 2 array
plot(model2)
library(performance)
library(see)
check_model(model2, check = "all")
# run Durbin-Watson test
DW <- durbinWatsonTest(model2)
tidy(DW)
# now plot the residuals
tmap_mode("view")
tm_shape(LonWardProfiles) +
tm_polygons("model2resids",
palette = "RdYlBu") +
tm_shape(lon_sec_schools_sf) +
tm_dots(col =  "TYPE")
# calculate the centroids of all wards in London
coordsW <- LonWardProfiles %>%
st_centroid() %>%
st_geometry()
plot(coordsW)
# now we need to generate a spatial weights matrix
# we'll start with a simple binary matrix of queen's case neighbours
LWard_nb <- LonWardProfiles %>%
poly2nb(., queen=T)
# or nearests neighbours
knn_wards <- coordsW %>%
knearneigh(., k=4)
LWard_knn <- knn_wards %>%
knn2nb()
# plot them
plot(LWard_nb, st_geometry(coordsW), col = "red")
plot(LWard_knn, st_geometry(coordsW), col="blue")
# create a spatial weights matrix object from these weights
# B is binary encoding listing them as neighbours or not, W is row standardised
Lward.queens_weight <- LWard_nb %>%
nb2listw(., style="W")
Lward.knn_4_weight <- LWard_knn %>%
nb2listw(., style="W")
Queen <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(model2resids) %>%
pull() %>%
moran.test(., Lward.queens_weight) %>%
tidy()
Nearest_neighbour <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(model2resids) %>%
pull() %>%
moran.test(., Lward.knn_4_weight) %>%
tidy()
# inspect
Queen
Nearest_neighbour
# original model
model2 <- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles)
tidy(model2)
library(spatialreg)
slag_dv_model2_queen <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style="C"), method = "eigen")
# what do the outputs show?
tidy(slag_dv_model2_queen)
# glance() gives model stats but this need something produced from a linear model
glance(slag_dv_model2_queen)
t <- summary(slag_dv_model2_queen)
sum(t$residuals)
library(lmtest)
lrtest(slag_dv_model2_queen, model2)
# weight list is just the code from the lagsarlm
weight_list <- nb2listw(LWard_knn, style = "C")
imp <- impacts(slag_dv_model2_queen, listw=weight_list)
imp
slag_dv_model2_queen_row <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style = "W"), method = "eigen")
W <- as(weight_list, "CsparseMatrix")
trMatc <- trW(W, type = "mult")
trMC <- trW(W, type = "MC")
imp2 <- impacts(slag_dv_model2_queen_row, tr=trMatc, R=200)
imp3 <- impacts(slag_dv_model2_queen_row, tr=trMC, R=200)
imp2
imp3
sum <- summary(imp2, zstats=TRUE, short=TRUE)
sum
# run a spatially-lagged regression model
slag_dv_model2_knn4 <- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style = "C"), method = "eigen")
# what do the outputs show?
tidy(slag_dv_model2_knn4)
# write out the residuals
LonWardProfiles <- LonWardProfiles %>%
mutate(slag_dv_model2_knn_resids = residuals(slag_dv_model2_knn4))
KNN4Moran <- LonWardProfiles %>%
st_drop_geometry() %>%
dplyr::select(slag_dv_model2_knn_resids) %>%
pull() %>%
moran.test(., Lward.knn_4_weight) %>%
tidy()
KNN4Moran
sem_model1 <- errorsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style = "C"), method = "eigen")
tidy(sem_model1)
library(spdep)
Lward.queens_weight_ROW <- LWard_nb %>%
nb2listw(., style = "W")
lm.LMtests(model2, Lward.queens_weight_ROW, test = c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
extradata <- read_csv("https://www.dropbox.com/s/qay9q1jwpffxcqj/LondonAdditionalDataFixed.csv?raw=1")
# add the extra data too
LonWardProfiles <- LonWardProfiles %>%
left_join(.,
extradata,
by= c("gss_code" = "Wardcode")) %>%
clean_names()
# print some of the column naes
LonWardProfiles %>%
names() %>%
tail(., n=10)
